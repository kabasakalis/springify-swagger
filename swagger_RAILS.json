{
  "swagger": "2.0",
  "info": {
    "description": "Hypermedia Based (HAL) Music API",
    "version": "1.0.0",
    "title": "MyMusic",
    "termsOfService": "",
    "contact": {
      "name": "Spiros Kabasakalis",
      "email": "kabasakalis@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/hal+json"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "home"
        ],
        "summary": "API Point of Entry",
        "operationId": "home",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "JWT_Token"
        ],
        "summary": "Obtain JSON Web Token (JWT)",
        "description": "If you get a 401 Unauthorized server response you are unauthenticated. You have to provide a JSON  Web Authentication Token (JWT) in the header for every request. You get a new JWT by executing this operation with valid user credentials,JWT is the value of token field in server response.The token can be copied and pasted in TOKEN field (upper left of the window).Pressing the arrow button will populate the header with the token for all subsequent requests.",
        "operationId": "getToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login to receive a token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Token retrieval"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Finds all users",
        "description": "Gets all users,paginated result.",
        "operationId": "getAllUsers",
        "parameters": [],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "description": "Only Admins can create users",
        "operationId": "addUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a user",
        "operationId": "getUserById",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of user that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updates a user",
        "description": "",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "ID of user to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated attributes for user.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "description": "",
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "user id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successfully Deleted."
          },
          "400": {
            "description": "Invalid user value"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/genres": {
      "get": {
        "tags": [
          "genre"
        ],
        "summary": "Finds all genres",
        "description": "Gets all genres,paginated result.",
        "operationId": "getAllGenres",
        "parameters": [],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Genre"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "genre"
        ],
        "summary": "Add a new genre",
        "description": "Only Admins and SuperAdmins can create genres",
        "operationId": "addGenre",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Genre to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/genres/{genreId}": {
      "get": {
        "tags": [
          "genre"
        ],
        "summary": "Find genre by ID",
        "description": "Returns a genre",
        "operationId": "getgenreById",
        "parameters": [
          {
            "in": "path",
            "name": "genreId",
            "description": "ID of genre that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "genre not found"
          }
        }
      },
      "put": {
        "tags": [
          "genre"
        ],
        "summary": "Updates a genre",
        "description": "",
        "operationId": "updategenre",
        "parameters": [
          {
            "in": "path",
            "name": "genreId",
            "description": "ID of genre to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated attributes for genre.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "genre not found"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "genre"
        ],
        "summary": "Deletes a genre",
        "description": "",
        "operationId": "deleteGenre",
        "parameters": [
          {
            "in": "path",
            "name": "genreId",
            "description": "genre id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successfully Deleted."
          },
          "400": {
            "description": "Invalid genre value"
          },
          "404": {
            "description": "Genre not found"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/artists": {
      "get": {
        "tags": [
          "artist"
        ],
        "summary": "Finds all Artists",
        "description": "Gets all artists, paginated result.",
        "operationId": "getAllArtists",
        "parameters": [],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artist"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "artist"
        ],
        "summary": "Add a new artist",
        "description": "Only Admins and Moderators can create artists",
        "operationId": "addArtist",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Artist to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Artist"
            }
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/artists/{artistId}": {
      "get": {
        "tags": [
          "artist"
        ],
        "summary": "Find artist by ID",
        "description": "Returns an artist",
        "operationId": "getArtistById",
        "parameters": [
          {
            "in": "path",
            "name": "artistId",
            "description": "ID of artist that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Artist"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Artist not found"
          }
        }
      },
      "put": {
        "tags": [
          "artist"
        ],
        "summary": "Updates an artist",
        "description": "",
        "operationId": "updateArtist",
        "produces": [
          "application/hal+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "artistId",
            "description": "ID of artist to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Artist to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Artist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Artist"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Artist not found"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "artist"
        ],
        "summary": "Deletes an artist",
        "description": "",
        "operationId": "deleteArtist",
        "parameters": [
          {
            "in": "path",
            "name": "artistId",
            "description": "Artist id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successfully Deleted."
          },
          "400": {
            "description": "Invalid artist value"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/albums": {
      "get": {
        "tags": [
          "album"
        ],
        "summary": "Finds all albums",
        "description": "Gets all albums, paginated result.",
        "operationId": "getAllAlbums",
        "parameters": [],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Album"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "album"
        ],
        "summary": "Add a new album",
        "description": "Only Admins and Moderators can create albums",
        "operationId": "addAlbum",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Album to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Album"
            }
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/albums/{albumId}": {
      "get": {
        "tags": [
          "album"
        ],
        "summary": "Find album by ID",
        "description": "Returns an album",
        "operationId": "getalbumById",
        "parameters": [
          {
            "in": "path",
            "name": "albumId",
            "description": "ID of album that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Album"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "album not found"
          }
        }
      },
      "put": {
        "tags": [
          "album"
        ],
        "summary": "Updates an album",
        "description": "",
        "operationId": "updatealbum",
        "parameters": [
          {
            "in": "path",
            "name": "albumId",
            "description": "ID of album to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated attributes for album.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Album"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Album"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "album not found"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "album"
        ],
        "summary": "Deletes an album",
        "description": "",
        "operationId": "deleteAlbum",
        "parameters": [
          {
            "in": "path",
            "name": "albumId",
            "description": "album id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successfully Deleted."
          },
          "400": {
            "description": "Invalid album value"
          },
          "404": {
            "description": "Album not found"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/playlists": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Finds all playlists",
        "description": "Gets all playlists,paginated result.",
        "operationId": "getAllPlaylists",
        "parameters": [],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Playlist"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "playlist"
        ],
        "summary": "Add a new playlist",
        "description": "Only Admins and Moderators can create playlists",
        "operationId": "addPlaylist",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Playlist to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/playlists/{playlistId}": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Find playlist by ID",
        "description": "Returns a playlist",
        "operationId": "getPlaylistById",
        "parameters": [
          {
            "in": "path",
            "name": "playlistId",
            "description": "ID of playlist that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "playlist not found"
          }
        }
      },
      "put": {
        "tags": [
          "playlist"
        ],
        "summary": "Updates a playlist",
        "description": "",
        "operationId": "updatePlaylist",
        "parameters": [
          {
            "in": "path",
            "name": "playlistId",
            "description": "ID of playlist to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated attributes for playlist.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "playlist not found"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "playlist"
        ],
        "summary": "Deletes a playlist",
        "description": "",
        "operationId": "deletePlaylist",
        "parameters": [
          {
            "in": "path",
            "name": "playlistId",
            "description": "playlist id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content. Successfully Deleted."
          },
          "400": {
            "description": "Invalid playlist value"
          },
          "404": {
            "description": "Playlist not found"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Credentials": {
      "type": "object",
      "properties": {
        "auth": {
          "type": "object",
          "required": [
            "email",
            "password"
          ],
          "properties": {
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "user": {
          "type": "object",
          "required": [
            "usernname",
            "email",
            "password"
          ],
          "properties": {
            "username": {
              "type": "string",
              "description": "username"
            },
            "email": {
              "type": "string",
              "description": "email"
            },
            "password": {
              "type": "string",
              "description": "password (at least 8 characters)"
            },
            "passwordConfirm": {
              "type": "string",
              "description": "password confirmation"
            }
          }
        }
      },
      "Genre": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of new Genre to add."
          }
        }
      },
      "Artist": {
        "type": "object",
        "properties": {
          "artist": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Myrath",
                "description": "Name of band or album."
              },
              "country": {
                "type": "string",
                "example": "Tunisia",
                "description": "artist's country of origin."
              }
            }
          }
        }
      },
      "Album": {
        "type": "object",
        "properties": {
          "album": {
            "type": "object",
            "required": [
              "title"
            ],
            "properties": {
              "title": {
                "type": "string"
              },
              "year": {
                "type": "integer",
                "format": "string"
              }
            }
          }
        }
      },
      "Playlist": {
        "type": "object",
        "properties": {
          "playlist": {
            "type": "object",
            "required": [
              "title"
            ],
            "properties": {
              "title": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
